// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IPrefetchPipe(
  input         clock,
  input         reset,
  input         io_csr_pf_enable,
  input         io_csr_parity_enable,
  input         io_flush,
  output        io_req_ready,
  input         io_req_valid,
  input  [49:0] io_req_bits_startAddr,
  input  [49:0] io_req_bits_nextlineStart,
  input         io_req_bits_ftqIdx_flag,
  input  [5:0]  io_req_bits_ftqIdx_value,
  input         io_req_bits_isSoftPrefetch,
  input         io_flushFromBpu_s2_valid,
  input         io_flushFromBpu_s2_bits_flag,
  input  [5:0]  io_flushFromBpu_s2_bits_value,
  input         io_flushFromBpu_s3_valid,
  input         io_flushFromBpu_s3_bits_flag,
  input  [5:0]  io_flushFromBpu_s3_bits_value,
  output        io_itlb_0_req_valid,
  output [49:0] io_itlb_0_req_bits_vaddr,
  input  [47:0] io_itlb_0_resp_bits_paddr_0,
  input  [49:0] io_itlb_0_resp_bits_gpaddr_0,
  input         io_itlb_0_resp_bits_miss,
  input         io_itlb_0_resp_bits_excp_0_gpf_instr,
  input         io_itlb_0_resp_bits_excp_0_pf_instr,
  input         io_itlb_0_resp_bits_excp_0_af_instr,
  output        io_itlb_1_req_valid,
  output [49:0] io_itlb_1_req_bits_vaddr,
  input  [47:0] io_itlb_1_resp_bits_paddr_0,
  input  [49:0] io_itlb_1_resp_bits_gpaddr_0,
  input         io_itlb_1_resp_bits_miss,
  input         io_itlb_1_resp_bits_excp_0_gpf_instr,
  input         io_itlb_1_resp_bits_excp_0_pf_instr,
  input         io_itlb_1_resp_bits_excp_0_af_instr,
  output [47:0] io_pmp_0_req_bits_addr,
  input         io_pmp_0_resp_instr,
  input         io_pmp_0_resp_mmio,
  output [47:0] io_pmp_1_req_bits_addr,
  input         io_pmp_1_resp_instr,
  input         io_pmp_1_resp_mmio,
  input         io_metaRead_toIMeta_ready,
  output        io_metaRead_toIMeta_valid,
  output [7:0]  io_metaRead_toIMeta_bits_vSetIdx_0,
  output [7:0]  io_metaRead_toIMeta_bits_vSetIdx_1,
  output        io_metaRead_toIMeta_bits_isDoubleLine,
  input  [35:0] io_metaRead_fromIMeta_metaData_0_0_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_0_1_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_0_2_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_0_3_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_1_0_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_1_1_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_1_2_tag,
  input  [35:0] io_metaRead_fromIMeta_metaData_1_3_tag,
  input         io_metaRead_fromIMeta_errors_0_0,
  input         io_metaRead_fromIMeta_errors_0_1,
  input         io_metaRead_fromIMeta_errors_0_2,
  input         io_metaRead_fromIMeta_errors_0_3,
  input         io_metaRead_fromIMeta_errors_1_0,
  input         io_metaRead_fromIMeta_errors_1_1,
  input         io_metaRead_fromIMeta_errors_1_2,
  input         io_metaRead_fromIMeta_errors_1_3,
  input         io_metaRead_fromIMeta_entryValid_0_0,
  input         io_metaRead_fromIMeta_entryValid_0_1,
  input         io_metaRead_fromIMeta_entryValid_0_2,
  input         io_metaRead_fromIMeta_entryValid_0_3,
  input         io_metaRead_fromIMeta_entryValid_1_0,
  input         io_metaRead_fromIMeta_entryValid_1_1,
  input         io_metaRead_fromIMeta_entryValid_1_2,
  input         io_metaRead_fromIMeta_entryValid_1_3,
  input         io_MSHRReq_ready,
  output        io_MSHRReq_valid,
  output [41:0] io_MSHRReq_bits_blkPaddr,
  output [7:0]  io_MSHRReq_bits_vSetIdx,
  input         io_MSHRResp_valid,
  input  [41:0] io_MSHRResp_bits_blkPaddr,
  input  [7:0]  io_MSHRResp_bits_vSetIdx,
  input  [3:0]  io_MSHRResp_bits_waymask,
  input         io_MSHRResp_bits_corrupt,
  input         io_wayLookupWrite_ready,
  output        io_wayLookupWrite_valid,
  output [7:0]  io_wayLookupWrite_bits_entry_vSetIdx_0,
  output [7:0]  io_wayLookupWrite_bits_entry_vSetIdx_1,
  output [3:0]  io_wayLookupWrite_bits_entry_waymask_0,
  output [3:0]  io_wayLookupWrite_bits_entry_waymask_1,
  output [35:0] io_wayLookupWrite_bits_entry_ptag_0,
  output [35:0] io_wayLookupWrite_bits_entry_ptag_1,
  output [1:0]  io_wayLookupWrite_bits_entry_itlb_exception_0,
  output [1:0]  io_wayLookupWrite_bits_entry_itlb_exception_1,
  output        io_wayLookupWrite_bits_entry_meta_corrupt_0,
  output        io_wayLookupWrite_bits_entry_meta_corrupt_1,
  output [49:0] io_wayLookupWrite_bits_gpf_gpaddr
);

  wire        s2_ready;
  wire        s1_ready;
  wire        s1_flush;
  wire        _toMSHRArbiter_io_in_0_ready;
  wire        _toMSHRArbiter_io_in_1_ready;
  wire        s0_can_go = s1_ready & io_metaRead_toIMeta_ready;
  wire        s0_fire =
    io_req_valid & s0_can_go
    & ~(io_flush | ~io_req_bits_isSoftPrefetch
        & (io_flushFromBpu_s2_valid
           & (io_flushFromBpu_s2_bits_flag ^ io_req_bits_ftqIdx_flag
              ^ io_flushFromBpu_s2_bits_value <= io_req_bits_ftqIdx_value)
           | io_flushFromBpu_s3_valid
           & (io_flushFromBpu_s3_bits_flag ^ io_req_bits_ftqIdx_flag
              ^ io_flushFromBpu_s3_bits_value <= io_req_bits_ftqIdx_value)) | s1_flush);
  reg         s1_valid;
  reg  [49:0] s1_req_vaddr_0;
  reg  [49:0] s1_req_vaddr_1;
  reg         s1_isSoftPrefetch;
  reg         s1_doubleline;
  reg         s1_req_ftqIdx_flag;
  reg  [5:0]  s1_req_ftqIdx_value;
  reg  [2:0]  state;
  reg         s0_fire_r;
  reg         s1_wait_itlb_0;
  reg         s1_wait_itlb_1;
  reg         REG;
  reg         REG_1;
  reg         s1_need_itlb_REG;
  wire        s1_need_itlb_0 =
    (s1_need_itlb_REG | s1_wait_itlb_0) & io_itlb_0_resp_bits_miss;
  reg         s1_need_itlb_REG_1;
  wire        s1_need_itlb_1 =
    (s1_need_itlb_REG_1 | s1_wait_itlb_1) & io_itlb_1_resp_bits_miss & s1_doubleline;
  reg         tlb_valid_pulse_REG;
  wire        tlb_valid_pulse_0 =
    (tlb_valid_pulse_REG | s1_wait_itlb_0) & ~io_itlb_0_resp_bits_miss;
  reg         tlb_valid_pulse_REG_1;
  wire        tlb_valid_pulse_1 =
    (tlb_valid_pulse_REG_1 | s1_wait_itlb_1) & ~io_itlb_1_resp_bits_miss & s1_doubleline;
  reg         tlb_valid_latch_valid;
  reg         tlb_valid_latch_valid_1;
  wire        itlb_finish =
    (tlb_valid_latch_valid | tlb_valid_pulse_0)
    & (~s1_doubleline | tlb_valid_latch_valid_1 | tlb_valid_pulse_1);
  reg  [47:0] s1_req_paddr_reg_r;
  reg  [47:0] s1_req_paddr_reg_r_1;
  wire [47:0] s1_req_paddr_0 =
    tlb_valid_pulse_0 ? io_itlb_0_resp_bits_paddr_0 : s1_req_paddr_reg_r;
  wire [47:0] s1_req_paddr_1 =
    tlb_valid_pulse_1 ? io_itlb_1_resp_bits_paddr_0 : s1_req_paddr_reg_r_1;
  reg  [49:0] s1_req_gpaddr_tmp_r;
  reg  [49:0] s1_req_gpaddr_tmp_r_1;
  wire [1:0]  s1_itlb_exception_x6 =
    io_itlb_0_resp_bits_excp_0_pf_instr
      ? 2'h1
      : io_itlb_0_resp_bits_excp_0_gpf_instr
          ? 2'h2
          : {2{io_itlb_0_resp_bits_excp_0_af_instr}};
  reg  [1:0]  s1_itlb_exception_r;
  wire [1:0]  s1_itlb_exception_0 =
    tlb_valid_pulse_0 ? s1_itlb_exception_x6 : s1_itlb_exception_r;
  wire [1:0]  s1_itlb_exception_x6_1 =
    io_itlb_1_resp_bits_excp_0_pf_instr
      ? 2'h1
      : io_itlb_1_resp_bits_excp_0_gpf_instr
          ? 2'h2
          : {2{io_itlb_1_resp_bits_excp_0_af_instr}};
  reg  [1:0]  s1_itlb_exception_r_1;
  wire [1:0]  s1_itlb_exception_1 =
    tlb_valid_pulse_1 ? s1_itlb_exception_x6_1 : s1_itlb_exception_r_1;
  wire        s1_need_meta = state == 3'h1 & itlb_finish | state == 3'h2;
  wire [3:0]  _s1_meta_corrupt_T =
    {io_metaRead_fromIMeta_errors_0_3,
     io_metaRead_fromIMeta_errors_0_2,
     io_metaRead_fromIMeta_errors_0_1,
     io_metaRead_fromIMeta_errors_0_0};
  wire [3:0]  _s1_meta_corrupt_T_2 =
    {io_metaRead_fromIMeta_errors_1_3,
     io_metaRead_fromIMeta_errors_1_2,
     io_metaRead_fromIMeta_errors_1_1,
     io_metaRead_fromIMeta_errors_1_0};
  wire [3:0]  s1_SRAM_waymasks_0 =
    tlb_valid_pulse_0
      ? {io_metaRead_fromIMeta_metaData_0_3_tag == io_itlb_0_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_0_3,
         io_metaRead_fromIMeta_metaData_0_2_tag == io_itlb_0_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_0_2,
         io_metaRead_fromIMeta_metaData_0_1_tag == io_itlb_0_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_0_1,
         io_metaRead_fromIMeta_metaData_0_0_tag == io_itlb_0_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_0_0}
      : {io_metaRead_fromIMeta_metaData_0_3_tag == s1_req_paddr_reg_r[47:12]
           & io_metaRead_fromIMeta_entryValid_0_3,
         io_metaRead_fromIMeta_metaData_0_2_tag == s1_req_paddr_reg_r[47:12]
           & io_metaRead_fromIMeta_entryValid_0_2,
         io_metaRead_fromIMeta_metaData_0_1_tag == s1_req_paddr_reg_r[47:12]
           & io_metaRead_fromIMeta_entryValid_0_1,
         io_metaRead_fromIMeta_metaData_0_0_tag == s1_req_paddr_reg_r[47:12]
           & io_metaRead_fromIMeta_entryValid_0_0};
  wire [3:0]  s1_SRAM_waymasks_1 =
    tlb_valid_pulse_1
      ? {io_metaRead_fromIMeta_metaData_1_3_tag == io_itlb_1_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_1_3,
         io_metaRead_fromIMeta_metaData_1_2_tag == io_itlb_1_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_1_2,
         io_metaRead_fromIMeta_metaData_1_1_tag == io_itlb_1_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_1_1,
         io_metaRead_fromIMeta_metaData_1_0_tag == io_itlb_1_resp_bits_paddr_0[47:12]
           & io_metaRead_fromIMeta_entryValid_1_0}
      : {io_metaRead_fromIMeta_metaData_1_3_tag == s1_req_paddr_reg_r_1[47:12]
           & io_metaRead_fromIMeta_entryValid_1_3,
         io_metaRead_fromIMeta_metaData_1_2_tag == s1_req_paddr_reg_r_1[47:12]
           & io_metaRead_fromIMeta_entryValid_1_2,
         io_metaRead_fromIMeta_metaData_1_1_tag == s1_req_paddr_reg_r_1[47:12]
           & io_metaRead_fromIMeta_entryValid_1_1,
         io_metaRead_fromIMeta_metaData_1_0_tag == s1_req_paddr_reg_r_1[47:12]
           & io_metaRead_fromIMeta_entryValid_1_0};
  reg         s1_SRAM_valid_REG;
  wire        s1_SRAM_valid = s0_fire_r | s1_SRAM_valid_REG;
  reg  [3:0]  s1_waymasks_r_0;
  reg  [3:0]  s1_waymasks_r_1;
  wire [3:0]  old_waymask = s1_SRAM_valid ? s1_SRAM_waymasks_0 : s1_waymasks_r_0;
  wire        s1_waymasks_0_ptag_same =
    io_MSHRResp_bits_blkPaddr[41:6] == s1_req_paddr_0[47:12];
  wire        s1_waymasks_0_way_same = io_MSHRResp_bits_waymask == old_waymask;
  wire        _s1_waymasks_0_T =
    io_MSHRResp_valid & ~io_MSHRResp_bits_corrupt
    & io_MSHRResp_bits_vSetIdx == s1_req_vaddr_0[13:6];
  wire [3:0]  s1_waymasks_0_new_mask =
    _s1_waymasks_0_T
      ? (s1_waymasks_0_ptag_same
           ? io_MSHRResp_bits_waymask
           : s1_waymasks_0_way_same ? 4'h0 : old_waymask)
      : old_waymask;
  wire [3:0]  old_waymask_1 = s1_SRAM_valid ? s1_SRAM_waymasks_1 : s1_waymasks_r_1;
  wire        s1_waymasks_1_ptag_same =
    io_MSHRResp_bits_blkPaddr[41:6] == s1_req_paddr_1[47:12];
  wire        s1_waymasks_1_way_same = io_MSHRResp_bits_waymask == old_waymask_1;
  wire        _s1_waymasks_1_T =
    io_MSHRResp_valid & ~io_MSHRResp_bits_corrupt
    & io_MSHRResp_bits_vSetIdx == s1_req_vaddr_1[13:6];
  wire [3:0]  s1_waymasks_1_new_mask =
    _s1_waymasks_1_T
      ? (s1_waymasks_1_ptag_same
           ? io_MSHRResp_bits_waymask
           : s1_waymasks_1_way_same ? 4'h0 : old_waymask_1)
      : old_waymask_1;
  wire        io_wayLookupWrite_valid_0 =
    (state == 3'h3 | ~(|state) & itlb_finish) & ~s1_flush & ~io_MSHRResp_valid
    & ~s1_isSoftPrefetch;
  wire        _GEN = io_wayLookupWrite_ready & io_wayLookupWrite_valid_0;
  wire [2:0]  _GEN_0 = s1_isSoftPrefetch ? {~s2_ready, 2'h0} : 3'h3;
  wire [2:0]  next_state =
    s1_flush
      ? 3'h0
      : (|state)
          ? (state == 3'h1
               ? (itlb_finish ? (io_metaRead_toIMeta_ready ? _GEN_0 : 3'h2) : state)
               : state == 3'h2
                   ? (io_metaRead_toIMeta_ready ? _GEN_0 : state)
                   : state == 3'h3
                       ? (_GEN & ~s2_ready ? 3'h4 : _GEN & s2_ready ? 3'h0 : state)
                       : state == 3'h4 & s2_ready ? 3'h0 : state)
          : s1_valid
              ? (itlb_finish
                   ? (_GEN | s1_isSoftPrefetch ? (s2_ready ? state : 3'h4) : 3'h3)
                   : 3'h1)
              : state;
  assign s1_flush =
    io_flush | s1_valid & ~s1_isSoftPrefetch & io_flushFromBpu_s3_valid
    & (io_flushFromBpu_s3_bits_flag ^ s1_req_ftqIdx_flag
       ^ io_flushFromBpu_s3_bits_value <= s1_req_ftqIdx_value);
  assign s1_ready = next_state == 3'h0;
  wire        s1_fire = s1_ready & s1_valid & ~s1_flush;
  reg         s2_valid;
  reg  [49:0] s2_req_vaddr_0;
  reg  [49:0] s2_req_vaddr_1;
  reg         s2_doubleline;
  reg  [47:0] s2_req_paddr_0;
  reg  [47:0] s2_req_paddr_1;
  reg  [1:0]  s2_exception_0;
  reg  [1:0]  s2_exception_1;
  reg         s2_mmio_0;
  reg         s2_mmio_1;
  reg  [3:0]  s2_waymasks_0;
  reg  [3:0]  s2_waymasks_1;
  wire        s2_MSHR_match_0 =
    s2_req_vaddr_0[13:6] == io_MSHRResp_bits_vSetIdx
    & s2_req_paddr_0[47:12] == io_MSHRResp_bits_blkPaddr[41:6] & s2_valid
    & io_MSHRResp_valid & ~io_MSHRResp_bits_corrupt;
  wire        s2_MSHR_match_1 =
    s2_req_vaddr_1[13:6] == io_MSHRResp_bits_vSetIdx
    & s2_req_paddr_1[47:12] == io_MSHRResp_bits_blkPaddr[41:6] & s2_valid
    & io_MSHRResp_valid & ~io_MSHRResp_bits_corrupt;
  reg         s2_MSHR_hits_valid;
  reg         s2_MSHR_hits_valid_1;
  wire        _s2_miss_T_8 = s2_exception_0 == 2'h0;
  wire        s2_miss_0 =
    ~(s2_MSHR_hits_valid | s2_MSHR_match_0 | (|s2_waymasks_0)) & _s2_miss_T_8
    & ~s2_mmio_0;
  wire        s2_miss_1 =
    ~(s2_MSHR_hits_valid_1 | s2_MSHR_match_1 | (|s2_waymasks_1)) & s2_doubleline
    & _s2_miss_T_8 & s2_exception_1 == 2'h0 & ~s2_mmio_0 & ~s2_mmio_1;
  reg         has_send_0;
  reg         has_send_1;
  wire        _toMSHRArbiter_io_in_0_valid_T_2 = s2_valid & s2_miss_0 & ~has_send_0;
  wire        _toMSHRArbiter_io_in_1_valid_T_2 = s2_valid & s2_miss_1 & ~has_send_1;
  wire        s2_finish =
    (has_send_0 | ~s2_miss_0 | _toMSHRArbiter_io_in_0_ready
     & _toMSHRArbiter_io_in_0_valid_T_2)
    & (has_send_1 | ~s2_miss_1 | _toMSHRArbiter_io_in_1_ready
       & _toMSHRArbiter_io_in_1_valid_T_2);
  assign s2_ready = s2_finish | ~s2_valid;
  wire        s2_fire = s2_valid & s2_finish & ~io_flush;
  wire        _GEN_1 = s1_flush | s1_fire;
  wire        s1_real_fire = s1_fire & io_csr_pf_enable;
  wire        _s2_MSHR_hits_T_1 = s2_fire | io_flush;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s1_req_vaddr_0 <= 50'h0;
      s1_req_vaddr_1 <= 50'h0;
      s1_isSoftPrefetch <= 1'h0;
      s1_doubleline <= 1'h0;
      s1_req_ftqIdx_flag <= 1'h0;
      s1_req_ftqIdx_value <= 6'h0;
      state <= 3'h0;
      s1_wait_itlb_0 <= 1'h0;
      s1_wait_itlb_1 <= 1'h0;
      tlb_valid_latch_valid <= 1'h0;
      tlb_valid_latch_valid_1 <= 1'h0;
      s1_req_paddr_reg_r <= 48'h0;
      s1_req_paddr_reg_r_1 <= 48'h0;
      s1_req_gpaddr_tmp_r <= 50'h0;
      s1_req_gpaddr_tmp_r_1 <= 50'h0;
      s1_itlb_exception_r <= 2'h0;
      s1_itlb_exception_r_1 <= 2'h0;
      s1_waymasks_r_0 <= 4'h0;
      s1_waymasks_r_1 <= 4'h0;
      s2_valid <= 1'h0;
      s2_req_vaddr_0 <= 50'h0;
      s2_req_vaddr_1 <= 50'h0;
      s2_doubleline <= 1'h0;
      s2_req_paddr_0 <= 48'h0;
      s2_req_paddr_1 <= 48'h0;
      s2_exception_0 <= 2'h0;
      s2_exception_1 <= 2'h0;
      s2_mmio_0 <= 1'h0;
      s2_mmio_1 <= 1'h0;
      s2_waymasks_0 <= 4'h0;
      s2_waymasks_1 <= 4'h0;
      s2_MSHR_hits_valid <= 1'h0;
      s2_MSHR_hits_valid_1 <= 1'h0;
      has_send_0 <= 1'h0;
      has_send_1 <= 1'h0;
    end
    else begin
      s1_valid <= ~s1_flush & (s0_fire | ~s1_fire & s1_valid);
      if (s0_fire) begin
        s1_req_vaddr_0 <= io_req_bits_startAddr;
        s1_req_vaddr_1 <= io_req_bits_nextlineStart;
        s1_isSoftPrefetch <= io_req_bits_isSoftPrefetch;
        s1_doubleline <= io_req_bits_startAddr[5];
        s1_req_ftqIdx_flag <= io_req_bits_ftqIdx_flag;
        s1_req_ftqIdx_value <= io_req_bits_ftqIdx_value;
      end
      state <= next_state;
      s1_wait_itlb_0 <=
        ~s1_flush
        & (REG & io_itlb_0_resp_bits_miss | ~(s1_wait_itlb_0 & ~io_itlb_0_resp_bits_miss)
           & s1_wait_itlb_0);
      s1_wait_itlb_1 <=
        ~s1_flush
        & (REG_1 & io_itlb_1_resp_bits_miss
           | ~(s1_wait_itlb_1 & ~io_itlb_1_resp_bits_miss) & s1_wait_itlb_1);
      tlb_valid_latch_valid <= ~_GEN_1 & (tlb_valid_pulse_0 | tlb_valid_latch_valid);
      tlb_valid_latch_valid_1 <= ~_GEN_1 & (tlb_valid_pulse_1 | tlb_valid_latch_valid_1);
      if (tlb_valid_pulse_0) begin
        s1_req_paddr_reg_r <= io_itlb_0_resp_bits_paddr_0;
        s1_req_gpaddr_tmp_r <= io_itlb_0_resp_bits_gpaddr_0;
        s1_itlb_exception_r <= s1_itlb_exception_x6;
      end
      if (tlb_valid_pulse_1) begin
        s1_req_paddr_reg_r_1 <= io_itlb_1_resp_bits_paddr_0;
        s1_req_gpaddr_tmp_r_1 <= io_itlb_1_resp_bits_gpaddr_0;
        s1_itlb_exception_r_1 <= s1_itlb_exception_x6_1;
      end
      if (s1_SRAM_valid | io_MSHRResp_valid & ~io_MSHRResp_bits_corrupt) begin
        if (_s1_waymasks_0_T) begin
          if (s1_waymasks_0_ptag_same)
            s1_waymasks_r_0 <= io_MSHRResp_bits_waymask;
          else if (s1_waymasks_0_way_same)
            s1_waymasks_r_0 <= 4'h0;
          else if (s1_SRAM_valid)
            s1_waymasks_r_0 <= s1_SRAM_waymasks_0;
        end
        else if (s1_SRAM_valid)
          s1_waymasks_r_0 <= s1_SRAM_waymasks_0;
        if (_s1_waymasks_1_T) begin
          if (s1_waymasks_1_ptag_same)
            s1_waymasks_r_1 <= io_MSHRResp_bits_waymask;
          else if (s1_waymasks_1_way_same)
            s1_waymasks_r_1 <= 4'h0;
          else if (s1_SRAM_valid)
            s1_waymasks_r_1 <= s1_SRAM_waymasks_1;
        end
        else if (s1_SRAM_valid)
          s1_waymasks_r_1 <= s1_SRAM_waymasks_1;
      end
      s2_valid <= ~io_flush & (s1_real_fire | ~s2_fire & s2_valid);
      if (s1_real_fire) begin
        s2_req_vaddr_0 <= s1_req_vaddr_0;
        s2_req_vaddr_1 <= s1_req_vaddr_1;
        s2_doubleline <= s1_doubleline;
        s2_req_paddr_0 <= s1_req_paddr_0;
        s2_req_paddr_1 <= s1_req_paddr_1;
        s2_exception_0 <=
          (|s1_itlb_exception_0)
            ? s1_itlb_exception_0
            : io_pmp_0_resp_instr
                ? {2{io_pmp_0_resp_instr}}
                : {2{io_csr_parity_enable & (|_s1_meta_corrupt_T)}};
        s2_exception_1 <=
          (|s1_itlb_exception_1)
            ? s1_itlb_exception_1
            : io_pmp_1_resp_instr
                ? {2{io_pmp_1_resp_instr}}
                : {2{io_csr_parity_enable & (|_s1_meta_corrupt_T_2)}};
        s2_mmio_0 <= io_pmp_0_resp_mmio;
        s2_mmio_1 <= io_pmp_1_resp_mmio;
        s2_waymasks_0 <= s1_waymasks_0_new_mask;
        s2_waymasks_1 <= s1_waymasks_1_new_mask;
      end
      s2_MSHR_hits_valid <= ~_s2_MSHR_hits_T_1 & (s2_MSHR_match_0 | s2_MSHR_hits_valid);
      s2_MSHR_hits_valid_1 <=
        ~_s2_MSHR_hits_T_1 & (s2_MSHR_match_1 | s2_MSHR_hits_valid_1);
      has_send_0 <=
        ~s1_real_fire
        & (_toMSHRArbiter_io_in_0_ready & _toMSHRArbiter_io_in_0_valid_T_2 | has_send_0);
      has_send_1 <=
        ~s1_real_fire
        & (_toMSHRArbiter_io_in_1_ready & _toMSHRArbiter_io_in_1_valid_T_2 | has_send_1);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    s0_fire_r <= s0_fire;
    REG <= s0_fire;
    REG_1 <= s0_fire;
    s1_need_itlb_REG <= s0_fire;
    s1_need_itlb_REG_1 <= s0_fire;
    tlb_valid_pulse_REG <= s0_fire;
    tlb_valid_pulse_REG_1 <= s0_fire;
    s1_SRAM_valid_REG <= s1_need_meta & io_metaRead_toIMeta_ready;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:17];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h12; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s1_valid = _RANDOM[5'h0][0];
        s1_req_vaddr_0 = {_RANDOM[5'h0][31:1], _RANDOM[5'h1][18:0]};
        s1_req_vaddr_1 = {_RANDOM[5'h1][31:19], _RANDOM[5'h2], _RANDOM[5'h3][4:0]};
        s1_isSoftPrefetch = _RANDOM[5'h3][5];
        s1_doubleline = _RANDOM[5'h3][6];
        s1_req_ftqIdx_flag = _RANDOM[5'h3][7];
        s1_req_ftqIdx_value = _RANDOM[5'h3][13:8];
        state = _RANDOM[5'h3][16:14];
        s0_fire_r = _RANDOM[5'h3][17];
        s1_wait_itlb_0 = _RANDOM[5'h3][18];
        s1_wait_itlb_1 = _RANDOM[5'h3][19];
        REG = _RANDOM[5'h3][20];
        REG_1 = _RANDOM[5'h3][21];
        s1_need_itlb_REG = _RANDOM[5'h3][22];
        s1_need_itlb_REG_1 = _RANDOM[5'h3][23];
        tlb_valid_pulse_REG = _RANDOM[5'h3][24];
        tlb_valid_pulse_REG_1 = _RANDOM[5'h3][25];
        tlb_valid_latch_valid = _RANDOM[5'h3][26];
        tlb_valid_latch_valid_1 = _RANDOM[5'h3][27];
        s1_req_paddr_reg_r = {_RANDOM[5'h3][31:28], _RANDOM[5'h4], _RANDOM[5'h5][11:0]};
        s1_req_paddr_reg_r_1 = {_RANDOM[5'h5][31:12], _RANDOM[5'h6][27:0]};
        s1_req_gpaddr_tmp_r = {_RANDOM[5'h6][31:28], _RANDOM[5'h7], _RANDOM[5'h8][13:0]};
        s1_req_gpaddr_tmp_r_1 = {_RANDOM[5'h8][31:14], _RANDOM[5'h9]};
        s1_itlb_exception_r = _RANDOM[5'hA][1:0];
        s1_itlb_exception_r_1 = _RANDOM[5'hA][3:2];
        s1_SRAM_valid_REG = _RANDOM[5'hA][4];
        s1_waymasks_r_0 = _RANDOM[5'hA][8:5];
        s1_waymasks_r_1 = _RANDOM[5'hA][12:9];
        s2_valid = _RANDOM[5'hA][13];
        s2_req_vaddr_0 = {_RANDOM[5'hA][31:14], _RANDOM[5'hB]};
        s2_req_vaddr_1 = {_RANDOM[5'hC], _RANDOM[5'hD][17:0]};
        s2_doubleline = _RANDOM[5'hD][19];
        s2_req_paddr_0 = {_RANDOM[5'hD][31:20], _RANDOM[5'hE], _RANDOM[5'hF][3:0]};
        s2_req_paddr_1 = {_RANDOM[5'hF][31:4], _RANDOM[5'h10][19:0]};
        s2_exception_0 = _RANDOM[5'h10][21:20];
        s2_exception_1 = _RANDOM[5'h10][23:22];
        s2_mmio_0 = _RANDOM[5'h10][24];
        s2_mmio_1 = _RANDOM[5'h10][25];
        s2_waymasks_0 = _RANDOM[5'h10][29:26];
        s2_waymasks_1 = {_RANDOM[5'h10][31:30], _RANDOM[5'h11][1:0]};
        s2_MSHR_hits_valid = _RANDOM[5'h11][2];
        s2_MSHR_hits_valid_1 = _RANDOM[5'h11][3];
        has_send_0 = _RANDOM[5'h11][4];
        has_send_1 = _RANDOM[5'h11][5];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s1_valid = 1'h0;
        s1_req_vaddr_0 = 50'h0;
        s1_req_vaddr_1 = 50'h0;
        s1_isSoftPrefetch = 1'h0;
        s1_doubleline = 1'h0;
        s1_req_ftqIdx_flag = 1'h0;
        s1_req_ftqIdx_value = 6'h0;
        state = 3'h0;
        s1_wait_itlb_0 = 1'h0;
        s1_wait_itlb_1 = 1'h0;
        tlb_valid_latch_valid = 1'h0;
        tlb_valid_latch_valid_1 = 1'h0;
        s1_req_paddr_reg_r = 48'h0;
        s1_req_paddr_reg_r_1 = 48'h0;
        s1_req_gpaddr_tmp_r = 50'h0;
        s1_req_gpaddr_tmp_r_1 = 50'h0;
        s1_itlb_exception_r = 2'h0;
        s1_itlb_exception_r_1 = 2'h0;
        s1_waymasks_r_0 = 4'h0;
        s1_waymasks_r_1 = 4'h0;
        s2_valid = 1'h0;
        s2_req_vaddr_0 = 50'h0;
        s2_req_vaddr_1 = 50'h0;
        s2_doubleline = 1'h0;
        s2_req_paddr_0 = 48'h0;
        s2_req_paddr_1 = 48'h0;
        s2_exception_0 = 2'h0;
        s2_exception_1 = 2'h0;
        s2_mmio_0 = 1'h0;
        s2_mmio_1 = 1'h0;
        s2_waymasks_0 = 4'h0;
        s2_waymasks_1 = 4'h0;
        s2_MSHR_hits_valid = 1'h0;
        s2_MSHR_hits_valid_1 = 1'h0;
        has_send_0 = 1'h0;
        has_send_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Arbiter2_ICacheMissReq toMSHRArbiter (
    .io_in_0_ready         (_toMSHRArbiter_io_in_0_ready),
    .io_in_0_valid         (_toMSHRArbiter_io_in_0_valid_T_2),
    .io_in_0_bits_blkPaddr (s2_req_paddr_0[47:6]),
    .io_in_0_bits_vSetIdx  (s2_req_vaddr_0[13:6]),
    .io_in_1_ready         (_toMSHRArbiter_io_in_1_ready),
    .io_in_1_valid         (_toMSHRArbiter_io_in_1_valid_T_2),
    .io_in_1_bits_blkPaddr (s2_req_paddr_1[47:6]),
    .io_in_1_bits_vSetIdx  (s2_req_vaddr_1[13:6]),
    .io_out_ready          (io_MSHRReq_ready),
    .io_out_valid          (io_MSHRReq_valid),
    .io_out_bits_blkPaddr  (io_MSHRReq_bits_blkPaddr),
    .io_out_bits_vSetIdx   (io_MSHRReq_bits_vSetIdx)
  );
  assign io_req_ready = s0_can_go;
  assign io_itlb_0_req_valid = s1_need_itlb_0 | io_req_valid;
  assign io_itlb_0_req_bits_vaddr =
    s1_need_itlb_0 ? s1_req_vaddr_0 : io_req_bits_startAddr;
  assign io_itlb_1_req_valid = s1_need_itlb_1 | io_req_valid & io_req_bits_startAddr[5];
  assign io_itlb_1_req_bits_vaddr =
    s1_need_itlb_1 ? s1_req_vaddr_1 : io_req_bits_nextlineStart;
  assign io_pmp_0_req_bits_addr = s1_req_paddr_0;
  assign io_pmp_1_req_bits_addr = s1_req_paddr_1;
  assign io_metaRead_toIMeta_valid = s1_need_meta | io_req_valid;
  assign io_metaRead_toIMeta_bits_vSetIdx_0 =
    s1_need_meta ? s1_req_vaddr_0[13:6] : io_req_bits_startAddr[13:6];
  assign io_metaRead_toIMeta_bits_vSetIdx_1 =
    s1_need_meta ? s1_req_vaddr_1[13:6] : io_req_bits_nextlineStart[13:6];
  assign io_metaRead_toIMeta_bits_isDoubleLine =
    s1_need_meta ? s1_doubleline : io_req_bits_startAddr[5];
  assign io_wayLookupWrite_valid = io_wayLookupWrite_valid_0;
  assign io_wayLookupWrite_bits_entry_vSetIdx_0 = s1_req_vaddr_0[13:6];
  assign io_wayLookupWrite_bits_entry_vSetIdx_1 = s1_req_vaddr_1[13:6];
  assign io_wayLookupWrite_bits_entry_waymask_0 = s1_waymasks_0_new_mask;
  assign io_wayLookupWrite_bits_entry_waymask_1 = s1_waymasks_1_new_mask;
  assign io_wayLookupWrite_bits_entry_ptag_0 = s1_req_paddr_0[47:12];
  assign io_wayLookupWrite_bits_entry_ptag_1 = s1_req_paddr_1[47:12];
  assign io_wayLookupWrite_bits_entry_itlb_exception_0 = s1_itlb_exception_0;
  assign io_wayLookupWrite_bits_entry_itlb_exception_1 =
    s1_doubleline ? s1_itlb_exception_1 : 2'h0;
  assign io_wayLookupWrite_bits_entry_meta_corrupt_0 = |_s1_meta_corrupt_T;
  assign io_wayLookupWrite_bits_entry_meta_corrupt_1 =
    s1_doubleline & (|_s1_meta_corrupt_T_2);
  assign io_wayLookupWrite_bits_gpf_gpaddr =
    s1_itlb_exception_0 == 2'h2
      ? (tlb_valid_pulse_0 ? io_itlb_0_resp_bits_gpaddr_0 : s1_req_gpaddr_tmp_r)
      : s1_itlb_exception_1 == 2'h2
          ? 50'((tlb_valid_pulse_1 ? io_itlb_1_resp_bits_gpaddr_0 : s1_req_gpaddr_tmp_r_1)
                - 50'h40)
          : 50'h0;
endmodule

